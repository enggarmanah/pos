package com.android.pos.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.android.pos.dao.BillsItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BILLS_ITEM.
*/
public class BillsItemDao extends AbstractDao<BillsItem, Long> {

    public static final String TABLENAME = "BILLS_ITEM";

    /**
     * Properties of entity BillsItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MerchantId = new Property(1, long.class, "merchantId", false, "MERCHANT_ID");
        public final static Property BillsId = new Property(2, long.class, "billsId", false, "BILLS_ID");
        public final static Property ProductId = new Property(3, long.class, "productId", false, "PRODUCT_ID");
        public final static Property ProductName = new Property(4, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property Quantity = new Property(5, Integer.class, "quantity", false, "QUANTITY");
        public final static Property UnitPrice = new Property(6, Integer.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property Remarks = new Property(7, String.class, "remarks", false, "REMARKS");
    };

    private DaoSession daoSession;

    private Query<BillsItem> bills_BillsItemListQuery;

    public BillsItemDao(DaoConfig config) {
        super(config);
    }
    
    public BillsItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BILLS_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MERCHANT_ID' INTEGER NOT NULL ," + // 1: merchantId
                "'BILLS_ID' INTEGER NOT NULL ," + // 2: billsId
                "'PRODUCT_ID' INTEGER NOT NULL ," + // 3: productId
                "'PRODUCT_NAME' TEXT," + // 4: productName
                "'QUANTITY' INTEGER," + // 5: quantity
                "'UNIT_PRICE' INTEGER," + // 6: unitPrice
                "'REMARKS' TEXT);"); // 7: remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BILLS_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BillsItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMerchantId());
        stmt.bindLong(3, entity.getBillsId());
        stmt.bindLong(4, entity.getProductId());
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(5, productName);
        }
 
        Integer quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindLong(6, quantity);
        }
 
        Integer unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindLong(7, unitPrice);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(8, remarks);
        }
    }

    @Override
    protected void attachEntity(BillsItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BillsItem readEntity(Cursor cursor, int offset) {
        BillsItem entity = new BillsItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // merchantId
            cursor.getLong(offset + 2), // billsId
            cursor.getLong(offset + 3), // productId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // productName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // quantity
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // unitPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remarks
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BillsItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMerchantId(cursor.getLong(offset + 1));
        entity.setBillsId(cursor.getLong(offset + 2));
        entity.setProductId(cursor.getLong(offset + 3));
        entity.setProductName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuantity(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUnitPrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRemarks(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BillsItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BillsItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "billsItemList" to-many relationship of Bills. */
    public List<BillsItem> _queryBills_BillsItemList(long billsId) {
        synchronized (this) {
            if (bills_BillsItemListQuery == null) {
                QueryBuilder<BillsItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BillsId.eq(null));
                queryBuilder.orderRaw("PRODUCT_NAME ASC");
                bills_BillsItemListQuery = queryBuilder.build();
            }
        }
        Query<BillsItem> query = bills_BillsItemListQuery.forCurrentThread();
        query.setParameter(0, billsId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMerchantDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBillsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM BILLS_ITEM T");
            builder.append(" LEFT JOIN MERCHANT T0 ON T.'MERCHANT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN BILLS T1 ON T.'BILLS_ID'=T1.'_id'");
            builder.append(" LEFT JOIN PRODUCT T2 ON T.'PRODUCT_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BillsItem loadCurrentDeep(Cursor cursor, boolean lock) {
        BillsItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Merchant merchant = loadCurrentOther(daoSession.getMerchantDao(), cursor, offset);
         if(merchant != null) {
            entity.setMerchant(merchant);
        }
        offset += daoSession.getMerchantDao().getAllColumns().length;

        Bills bills = loadCurrentOther(daoSession.getBillsDao(), cursor, offset);
         if(bills != null) {
            entity.setBills(bills);
        }
        offset += daoSession.getBillsDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
         if(product != null) {
            entity.setProduct(product);
        }

        return entity;    
    }

    public BillsItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BillsItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BillsItem> list = new ArrayList<BillsItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BillsItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BillsItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
