package com.android.pos.dao;

import java.io.Serializable;
import java.util.List;

import com.android.pos.dao.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PRODUCT.
 */
@SuppressWarnings("serial")
public class Product implements Serializable {

    private Long id;
    private String refId;
    private long merchantId;
    private Long productGroupId;
    private String code;
    private String name;
    private String type;
    private Float price1;
    private Float price2;
    private Float price3;
    private Float costPrice;
    private String picRequired;
    private Float commision;
    private Float promoPrice;
    private java.util.Date promoStart;
    private java.util.Date promoEnd;
    private String quantityType;
    private Float stock;
    private Float minStock;
    private String status;
    private String uploadStatus;
    private String createBy;
    private java.util.Date createDate;
    private String updateBy;
    private java.util.Date updateDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private Merchant merchant;
    private Long merchant__resolvedKey;

    private ProductGroup productGroup;
    private Long productGroup__resolvedKey;

    private List<TransactionItem> transactionItemList;
    private List<Inventory> inventoryList;

    public Product() {
    }

    public Product(Long id) {
        this.id = id;
    }

    public Product(Long id, String refId, long merchantId, Long productGroupId, String code, String name, String type, Float price1, Float price2, Float price3, Float costPrice, String picRequired, Float commision, Float promoPrice, java.util.Date promoStart, java.util.Date promoEnd, String quantityType, Float stock, Float minStock, String status, String uploadStatus, String createBy, java.util.Date createDate, String updateBy, java.util.Date updateDate) {
        this.id = id;
        this.refId = refId;
        this.merchantId = merchantId;
        this.productGroupId = productGroupId;
        this.code = code;
        this.name = name;
        this.type = type;
        this.price1 = price1;
        this.price2 = price2;
        this.price3 = price3;
        this.costPrice = costPrice;
        this.picRequired = picRequired;
        this.commision = commision;
        this.promoPrice = promoPrice;
        this.promoStart = promoStart;
        this.promoEnd = promoEnd;
        this.quantityType = quantityType;
        this.stock = stock;
        this.minStock = minStock;
        this.status = status;
        this.uploadStatus = uploadStatus;
        this.createBy = createBy;
        this.createDate = createDate;
        this.updateBy = updateBy;
        this.updateDate = updateDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRefId() {
        return refId;
    }

    public void setRefId(String refId) {
        this.refId = refId;
    }

    public long getMerchantId() {
        return merchantId;
    }

    public void setMerchantId(long merchantId) {
        this.merchantId = merchantId;
    }

    public Long getProductGroupId() {
        return productGroupId;
    }

    public void setProductGroupId(Long productGroupId) {
        this.productGroupId = productGroupId;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Float getPrice1() {
        return price1;
    }

    public void setPrice1(Float price1) {
        this.price1 = price1;
    }

    public Float getPrice2() {
        return price2;
    }

    public void setPrice2(Float price2) {
        this.price2 = price2;
    }

    public Float getPrice3() {
        return price3;
    }

    public void setPrice3(Float price3) {
        this.price3 = price3;
    }

    public Float getCostPrice() {
        return costPrice;
    }

    public void setCostPrice(Float costPrice) {
        this.costPrice = costPrice;
    }

    public String getPicRequired() {
        return picRequired;
    }

    public void setPicRequired(String picRequired) {
        this.picRequired = picRequired;
    }

    public Float getCommision() {
        return commision;
    }

    public void setCommision(Float commision) {
        this.commision = commision;
    }

    public Float getPromoPrice() {
        return promoPrice;
    }

    public void setPromoPrice(Float promoPrice) {
        this.promoPrice = promoPrice;
    }

    public java.util.Date getPromoStart() {
        return promoStart;
    }

    public void setPromoStart(java.util.Date promoStart) {
        this.promoStart = promoStart;
    }

    public java.util.Date getPromoEnd() {
        return promoEnd;
    }

    public void setPromoEnd(java.util.Date promoEnd) {
        this.promoEnd = promoEnd;
    }

    public String getQuantityType() {
        return quantityType;
    }

    public void setQuantityType(String quantityType) {
        this.quantityType = quantityType;
    }

    public Float getStock() {
        return stock;
    }

    public void setStock(Float stock) {
        this.stock = stock;
    }

    public Float getMinStock() {
        return minStock;
    }

    public void setMinStock(Float minStock) {
        this.minStock = minStock;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getUploadStatus() {
        return uploadStatus;
    }

    public void setUploadStatus(String uploadStatus) {
        this.uploadStatus = uploadStatus;
    }

    public String getCreateBy() {
        return createBy;
    }

    public void setCreateBy(String createBy) {
        this.createBy = createBy;
    }

    public java.util.Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(java.util.Date createDate) {
        this.createDate = createDate;
    }

    public String getUpdateBy() {
        return updateBy;
    }

    public void setUpdateBy(String updateBy) {
        this.updateBy = updateBy;
    }

    public java.util.Date getUpdateDate() {
        return updateDate;
    }

    public void setUpdateDate(java.util.Date updateDate) {
        this.updateDate = updateDate;
    }

    /** To-one relationship, resolved on first access. */
    public Merchant getMerchant() {
        long __key = this.merchantId;
        if (merchant__resolvedKey == null || !merchant__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MerchantDao targetDao = daoSession.getMerchantDao();
            Merchant merchantNew = targetDao.load(__key);
            synchronized (this) {
                merchant = merchantNew;
            	merchant__resolvedKey = __key;
            }
        }
        return merchant;
    }

    public void setMerchant(Merchant merchant) {
        if (merchant == null) {
            throw new DaoException("To-one property 'merchantId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.merchant = merchant;
            merchantId = merchant.getId();
            merchant__resolvedKey = merchantId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ProductGroup getProductGroup() {
        Long __key = this.productGroupId;
        if (productGroup__resolvedKey == null || !productGroup__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductGroupDao targetDao = daoSession.getProductGroupDao();
            ProductGroup productGroupNew = targetDao.load(__key);
            synchronized (this) {
                productGroup = productGroupNew;
            	productGroup__resolvedKey = __key;
            }
        }
        return productGroup;
    }

    public void setProductGroup(ProductGroup productGroup) {
        synchronized (this) {
            this.productGroup = productGroup;
            productGroupId = productGroup == null ? null : productGroup.getId();
            productGroup__resolvedKey = productGroupId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TransactionItem> getTransactionItemList() {
        if (transactionItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionItemDao targetDao = daoSession.getTransactionItemDao();
            List<TransactionItem> transactionItemListNew = targetDao._queryProduct_TransactionItemList(id);
            synchronized (this) {
                if(transactionItemList == null) {
                    transactionItemList = transactionItemListNew;
                }
            }
        }
        return transactionItemList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTransactionItemList() {
        transactionItemList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Inventory> getInventoryList() {
        if (inventoryList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InventoryDao targetDao = daoSession.getInventoryDao();
            List<Inventory> inventoryListNew = targetDao._queryProduct_InventoryList(id);
            synchronized (this) {
                if(inventoryList == null) {
                    inventoryList = inventoryListNew;
                }
            }
        }
        return inventoryList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInventoryList() {
        inventoryList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
