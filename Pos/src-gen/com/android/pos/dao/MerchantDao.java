package com.android.pos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.pos.dao.Merchant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MERCHANT.
*/
public class MerchantDao extends AbstractDao<Merchant, Long> {

    public static final String TABLENAME = "MERCHANT";

    /**
     * Properties of entity Merchant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RefId = new Property(1, String.class, "refId", false, "REF_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Telephone = new Property(5, String.class, "telephone", false, "TELEPHONE");
        public final static Property ContactName = new Property(6, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactTelephone = new Property(7, String.class, "contactTelephone", false, "CONTACT_TELEPHONE");
        public final static Property ContactEmail = new Property(8, String.class, "contactEmail", false, "CONTACT_EMAIL");
        public final static Property LoginId = new Property(9, String.class, "loginId", false, "LOGIN_ID");
        public final static Property PrinterType = new Property(10, String.class, "printerType", false, "PRINTER_TYPE");
        public final static Property PrinterAddress = new Property(11, String.class, "printerAddress", false, "PRINTER_ADDRESS");
        public final static Property PrinterMiniFont = new Property(12, String.class, "printerMiniFont", false, "PRINTER_MINI_FONT");
        public final static Property PrinterLineSize = new Property(13, Integer.class, "printerLineSize", false, "PRINTER_LINE_SIZE");
        public final static Property PrinterRequired = new Property(14, String.class, "printerRequired", false, "PRINTER_REQUIRED");
        public final static Property Password = new Property(15, String.class, "password", false, "PASSWORD");
        public final static Property PeriodStart = new Property(16, java.util.Date.class, "periodStart", false, "PERIOD_START");
        public final static Property PeriodEnd = new Property(17, java.util.Date.class, "periodEnd", false, "PERIOD_END");
        public final static Property PriceTypeCount = new Property(18, Integer.class, "priceTypeCount", false, "PRICE_TYPE_COUNT");
        public final static Property PriceLabel1 = new Property(19, String.class, "priceLabel1", false, "PRICE_LABEL1");
        public final static Property PriceLabel2 = new Property(20, String.class, "priceLabel2", false, "PRICE_LABEL2");
        public final static Property PriceLabel3 = new Property(21, String.class, "priceLabel3", false, "PRICE_LABEL3");
        public final static Property DiscountType = new Property(22, String.class, "discountType", false, "DISCOUNT_TYPE");
        public final static Property PaymentType = new Property(23, String.class, "paymentType", false, "PAYMENT_TYPE");
        public final static Property TaxPercentage = new Property(24, Float.class, "taxPercentage", false, "TAX_PERCENTAGE");
        public final static Property ServiceChargePercentage = new Property(25, Float.class, "serviceChargePercentage", false, "SERVICE_CHARGE_PERCENTAGE");
        public final static Property IsLogin = new Property(26, Boolean.class, "isLogin", false, "IS_LOGIN");
        public final static Property Status = new Property(27, String.class, "status", false, "STATUS");
        public final static Property Locale = new Property(28, String.class, "locale", false, "LOCALE");
        public final static Property UploadStatus = new Property(29, String.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property CreateBy = new Property(30, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateDate = new Property(31, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateBy = new Property(32, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateDate = new Property(33, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
    };

    private DaoSession daoSession;


    public MerchantDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MERCHANT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REF_ID' TEXT," + // 1: refId
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'TYPE' TEXT," + // 3: type
                "'ADDRESS' TEXT," + // 4: address
                "'TELEPHONE' TEXT," + // 5: telephone
                "'CONTACT_NAME' TEXT," + // 6: contactName
                "'CONTACT_TELEPHONE' TEXT," + // 7: contactTelephone
                "'CONTACT_EMAIL' TEXT," + // 8: contactEmail
                "'LOGIN_ID' TEXT," + // 9: loginId
                "'PRINTER_TYPE' TEXT," + // 10: printerType
                "'PRINTER_ADDRESS' TEXT," + // 11: printerAddress
                "'PRINTER_MINI_FONT' TEXT," + // 12: printerMiniFont
                "'PRINTER_LINE_SIZE' INTEGER," + // 13: printerLineSize
                "'PRINTER_REQUIRED' TEXT," + // 14: printerRequired
                "'PASSWORD' TEXT," + // 15: password
                "'PERIOD_START' INTEGER," + // 16: periodStart
                "'PERIOD_END' INTEGER," + // 17: periodEnd
                "'PRICE_TYPE_COUNT' INTEGER," + // 18: priceTypeCount
                "'PRICE_LABEL1' TEXT," + // 19: priceLabel1
                "'PRICE_LABEL2' TEXT," + // 20: priceLabel2
                "'PRICE_LABEL3' TEXT," + // 21: priceLabel3
                "'DISCOUNT_TYPE' TEXT," + // 22: discountType
                "'PAYMENT_TYPE' TEXT," + // 23: paymentType
                "'TAX_PERCENTAGE' REAL," + // 24: taxPercentage
                "'SERVICE_CHARGE_PERCENTAGE' REAL," + // 25: serviceChargePercentage
                "'IS_LOGIN' INTEGER," + // 26: isLogin
                "'STATUS' TEXT," + // 27: status
                "'LOCALE' TEXT," + // 28: locale
                "'UPLOAD_STATUS' TEXT," + // 29: uploadStatus
                "'CREATE_BY' TEXT," + // 30: createBy
                "'CREATE_DATE' INTEGER," + // 31: createDate
                "'UPDATE_BY' TEXT," + // 32: updateBy
                "'UPDATE_DATE' INTEGER);"); // 33: updateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MERCHANT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Merchant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String refId = entity.getRefId();
        if (refId != null) {
            stmt.bindString(2, refId);
        }
        stmt.bindString(3, entity.getName());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(6, telephone);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(7, contactName);
        }
 
        String contactTelephone = entity.getContactTelephone();
        if (contactTelephone != null) {
            stmt.bindString(8, contactTelephone);
        }
 
        String contactEmail = entity.getContactEmail();
        if (contactEmail != null) {
            stmt.bindString(9, contactEmail);
        }
 
        String loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindString(10, loginId);
        }
 
        String printerType = entity.getPrinterType();
        if (printerType != null) {
            stmt.bindString(11, printerType);
        }
 
        String printerAddress = entity.getPrinterAddress();
        if (printerAddress != null) {
            stmt.bindString(12, printerAddress);
        }
 
        String printerMiniFont = entity.getPrinterMiniFont();
        if (printerMiniFont != null) {
            stmt.bindString(13, printerMiniFont);
        }
 
        Integer printerLineSize = entity.getPrinterLineSize();
        if (printerLineSize != null) {
            stmt.bindLong(14, printerLineSize);
        }
 
        String printerRequired = entity.getPrinterRequired();
        if (printerRequired != null) {
            stmt.bindString(15, printerRequired);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(16, password);
        }
 
        java.util.Date periodStart = entity.getPeriodStart();
        if (periodStart != null) {
            stmt.bindLong(17, periodStart.getTime());
        }
 
        java.util.Date periodEnd = entity.getPeriodEnd();
        if (periodEnd != null) {
            stmt.bindLong(18, periodEnd.getTime());
        }
 
        Integer priceTypeCount = entity.getPriceTypeCount();
        if (priceTypeCount != null) {
            stmt.bindLong(19, priceTypeCount);
        }
 
        String priceLabel1 = entity.getPriceLabel1();
        if (priceLabel1 != null) {
            stmt.bindString(20, priceLabel1);
        }
 
        String priceLabel2 = entity.getPriceLabel2();
        if (priceLabel2 != null) {
            stmt.bindString(21, priceLabel2);
        }
 
        String priceLabel3 = entity.getPriceLabel3();
        if (priceLabel3 != null) {
            stmt.bindString(22, priceLabel3);
        }
 
        String discountType = entity.getDiscountType();
        if (discountType != null) {
            stmt.bindString(23, discountType);
        }
 
        String paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindString(24, paymentType);
        }
 
        Float taxPercentage = entity.getTaxPercentage();
        if (taxPercentage != null) {
            stmt.bindDouble(25, taxPercentage);
        }
 
        Float serviceChargePercentage = entity.getServiceChargePercentage();
        if (serviceChargePercentage != null) {
            stmt.bindDouble(26, serviceChargePercentage);
        }
 
        Boolean isLogin = entity.getIsLogin();
        if (isLogin != null) {
            stmt.bindLong(27, isLogin ? 1l: 0l);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(28, status);
        }
 
        String locale = entity.getLocale();
        if (locale != null) {
            stmt.bindString(29, locale);
        }
 
        String uploadStatus = entity.getUploadStatus();
        if (uploadStatus != null) {
            stmt.bindString(30, uploadStatus);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(31, createBy);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(32, createDate.getTime());
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(33, updateBy);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(34, updateDate.getTime());
        }
    }

    @Override
    protected void attachEntity(Merchant entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Merchant readEntity(Cursor cursor, int offset) {
        Merchant entity = new Merchant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // refId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // telephone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contactName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contactTelephone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // contactEmail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // loginId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // printerType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // printerAddress
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // printerMiniFont
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // printerLineSize
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // printerRequired
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // password
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // periodStart
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // periodEnd
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // priceTypeCount
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // priceLabel1
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // priceLabel2
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // priceLabel3
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // discountType
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // paymentType
            cursor.isNull(offset + 24) ? null : cursor.getFloat(offset + 24), // taxPercentage
            cursor.isNull(offset + 25) ? null : cursor.getFloat(offset + 25), // serviceChargePercentage
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // isLogin
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // status
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // locale
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // uploadStatus
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // createBy
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)), // createDate
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // updateBy
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)) // updateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Merchant entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRefId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTelephone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContactName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContactTelephone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContactEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLoginId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrinterType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrinterAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrinterMiniFont(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPrinterLineSize(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPrinterRequired(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPassword(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPeriodStart(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setPeriodEnd(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setPriceTypeCount(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setPriceLabel1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPriceLabel2(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPriceLabel3(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDiscountType(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPaymentType(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTaxPercentage(cursor.isNull(offset + 24) ? null : cursor.getFloat(offset + 24));
        entity.setServiceChargePercentage(cursor.isNull(offset + 25) ? null : cursor.getFloat(offset + 25));
        entity.setIsLogin(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setStatus(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLocale(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setUploadStatus(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCreateBy(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCreateDate(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
        entity.setUpdateBy(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setUpdateDate(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Merchant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Merchant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
