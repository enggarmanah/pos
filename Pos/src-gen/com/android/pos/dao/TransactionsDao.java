package com.android.pos.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.android.pos.dao.Transactions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRANSACTIONS.
*/
public class TransactionsDao extends AbstractDao<Transactions, Long> {

    public static final String TABLENAME = "TRANSACTIONS";

    /**
     * Properties of entity Transactions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RefId = new Property(1, String.class, "refId", false, "REF_ID");
        public final static Property MerchantId = new Property(2, long.class, "merchantId", false, "MERCHANT_ID");
        public final static Property TransactionNo = new Property(3, String.class, "transactionNo", false, "TRANSACTION_NO");
        public final static Property OrderType = new Property(4, String.class, "orderType", false, "ORDER_TYPE");
        public final static Property OrderReference = new Property(5, String.class, "orderReference", false, "ORDER_REFERENCE");
        public final static Property TransactionDate = new Property(6, java.util.Date.class, "transactionDate", false, "TRANSACTION_DATE");
        public final static Property BillAmount = new Property(7, Float.class, "billAmount", false, "BILL_AMOUNT");
        public final static Property DiscountName = new Property(8, String.class, "discountName", false, "DISCOUNT_NAME");
        public final static Property DiscountPercentage = new Property(9, Float.class, "discountPercentage", false, "DISCOUNT_PERCENTAGE");
        public final static Property DiscountAmount = new Property(10, Float.class, "discountAmount", false, "DISCOUNT_AMOUNT");
        public final static Property TaxPercentage = new Property(11, Float.class, "taxPercentage", false, "TAX_PERCENTAGE");
        public final static Property TaxAmount = new Property(12, Float.class, "taxAmount", false, "TAX_AMOUNT");
        public final static Property ServiceChargePercentage = new Property(13, Float.class, "serviceChargePercentage", false, "SERVICE_CHARGE_PERCENTAGE");
        public final static Property ServiceChargeAmount = new Property(14, Float.class, "serviceChargeAmount", false, "SERVICE_CHARGE_AMOUNT");
        public final static Property TotalAmount = new Property(15, Float.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property PaymentAmount = new Property(16, Float.class, "paymentAmount", false, "PAYMENT_AMOUNT");
        public final static Property ReturnAmount = new Property(17, Float.class, "returnAmount", false, "RETURN_AMOUNT");
        public final static Property PaymentType = new Property(18, String.class, "paymentType", false, "PAYMENT_TYPE");
        public final static Property CashierId = new Property(19, long.class, "cashierId", false, "CASHIER_ID");
        public final static Property CashierName = new Property(20, String.class, "cashierName", false, "CASHIER_NAME");
        public final static Property CustomerId = new Property(21, Long.class, "customerId", false, "CUSTOMER_ID");
        public final static Property CustomerName = new Property(22, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property UploadStatus = new Property(23, String.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property Status = new Property(24, String.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;

    private Query<Transactions> user_TransactionsListQuery;
    private Query<Transactions> customer_TransactionsListQuery;

    public TransactionsDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSACTIONS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REF_ID' TEXT," + // 1: refId
                "'MERCHANT_ID' INTEGER NOT NULL ," + // 2: merchantId
                "'TRANSACTION_NO' TEXT," + // 3: transactionNo
                "'ORDER_TYPE' TEXT," + // 4: orderType
                "'ORDER_REFERENCE' TEXT," + // 5: orderReference
                "'TRANSACTION_DATE' INTEGER NOT NULL ," + // 6: transactionDate
                "'BILL_AMOUNT' DECIMAL(10,2)," + // 7: billAmount
                "'DISCOUNT_NAME' TEXT," + // 8: discountName
                "'DISCOUNT_PERCENTAGE' DECIMAL(10,2)," + // 9: discountPercentage
                "'DISCOUNT_AMOUNT' DECIMAL(10,2)," + // 10: discountAmount
                "'TAX_PERCENTAGE' DECIMAL(10,2)," + // 11: taxPercentage
                "'TAX_AMOUNT' DECIMAL(10,2)," + // 12: taxAmount
                "'SERVICE_CHARGE_PERCENTAGE' DECIMAL(10,2)," + // 13: serviceChargePercentage
                "'SERVICE_CHARGE_AMOUNT' DECIMAL(10,2)," + // 14: serviceChargeAmount
                "'TOTAL_AMOUNT' DECIMAL(10,2)," + // 15: totalAmount
                "'PAYMENT_AMOUNT' DECIMAL(10,2)," + // 16: paymentAmount
                "'RETURN_AMOUNT' DECIMAL(10,2)," + // 17: returnAmount
                "'PAYMENT_TYPE' TEXT," + // 18: paymentType
                "'CASHIER_ID' INTEGER NOT NULL ," + // 19: cashierId
                "'CASHIER_NAME' TEXT," + // 20: cashierName
                "'CUSTOMER_ID' INTEGER," + // 21: customerId
                "'CUSTOMER_NAME' TEXT," + // 22: customerName
                "'UPLOAD_STATUS' TEXT," + // 23: uploadStatus
                "'STATUS' TEXT);"); // 24: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSACTIONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transactions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String refId = entity.getRefId();
        if (refId != null) {
            stmt.bindString(2, refId);
        }
        stmt.bindLong(3, entity.getMerchantId());
 
        String transactionNo = entity.getTransactionNo();
        if (transactionNo != null) {
            stmt.bindString(4, transactionNo);
        }
 
        String orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindString(5, orderType);
        }
 
        String orderReference = entity.getOrderReference();
        if (orderReference != null) {
            stmt.bindString(6, orderReference);
        }
        stmt.bindLong(7, entity.getTransactionDate().getTime());
 
        Float billAmount = entity.getBillAmount();
        if (billAmount != null) {
            stmt.bindDouble(8, billAmount);
        }
 
        String discountName = entity.getDiscountName();
        if (discountName != null) {
            stmt.bindString(9, discountName);
        }
 
        Float discountPercentage = entity.getDiscountPercentage();
        if (discountPercentage != null) {
            stmt.bindDouble(10, discountPercentage);
        }
 
        Float discountAmount = entity.getDiscountAmount();
        if (discountAmount != null) {
            stmt.bindDouble(11, discountAmount);
        }
 
        Float taxPercentage = entity.getTaxPercentage();
        if (taxPercentage != null) {
            stmt.bindDouble(12, taxPercentage);
        }
 
        Float taxAmount = entity.getTaxAmount();
        if (taxAmount != null) {
            stmt.bindDouble(13, taxAmount);
        }
 
        Float serviceChargePercentage = entity.getServiceChargePercentage();
        if (serviceChargePercentage != null) {
            stmt.bindDouble(14, serviceChargePercentage);
        }
 
        Float serviceChargeAmount = entity.getServiceChargeAmount();
        if (serviceChargeAmount != null) {
            stmt.bindDouble(15, serviceChargeAmount);
        }
 
        Float totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindDouble(16, totalAmount);
        }
 
        Float paymentAmount = entity.getPaymentAmount();
        if (paymentAmount != null) {
            stmt.bindDouble(17, paymentAmount);
        }
 
        Float returnAmount = entity.getReturnAmount();
        if (returnAmount != null) {
            stmt.bindDouble(18, returnAmount);
        }
 
        String paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindString(19, paymentType);
        }
        stmt.bindLong(20, entity.getCashierId());
 
        String cashierName = entity.getCashierName();
        if (cashierName != null) {
            stmt.bindString(21, cashierName);
        }
 
        Long customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindLong(22, customerId);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(23, customerName);
        }
 
        String uploadStatus = entity.getUploadStatus();
        if (uploadStatus != null) {
            stmt.bindString(24, uploadStatus);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(25, status);
        }
    }

    @Override
    protected void attachEntity(Transactions entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Transactions readEntity(Cursor cursor, int offset) {
        Transactions entity = new Transactions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // refId
            cursor.getLong(offset + 2), // merchantId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // transactionNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderReference
            new java.util.Date(cursor.getLong(offset + 6)), // transactionDate
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // billAmount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // discountName
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // discountPercentage
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // discountAmount
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // taxPercentage
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // taxAmount
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // serviceChargePercentage
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // serviceChargeAmount
            cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15), // totalAmount
            cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16), // paymentAmount
            cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17), // returnAmount
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // paymentType
            cursor.getLong(offset + 19), // cashierId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // cashierName
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // customerId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // customerName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // uploadStatus
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transactions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRefId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMerchantId(cursor.getLong(offset + 2));
        entity.setTransactionNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderReference(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTransactionDate(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setBillAmount(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setDiscountName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDiscountPercentage(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setDiscountAmount(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setTaxPercentage(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setTaxAmount(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setServiceChargePercentage(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setServiceChargeAmount(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setTotalAmount(cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15));
        entity.setPaymentAmount(cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16));
        entity.setReturnAmount(cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17));
        entity.setPaymentType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCashierId(cursor.getLong(offset + 19));
        entity.setCashierName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCustomerId(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setCustomerName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUploadStatus(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setStatus(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Transactions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Transactions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "transactionsList" to-many relationship of User. */
    public List<Transactions> _queryUser_TransactionsList(long cashierId) {
        synchronized (this) {
            if (user_TransactionsListQuery == null) {
                QueryBuilder<Transactions> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CashierId.eq(null));
                queryBuilder.orderRaw("TRANSACTION_DATE ASC");
                user_TransactionsListQuery = queryBuilder.build();
            }
        }
        Query<Transactions> query = user_TransactionsListQuery.forCurrentThread();
        query.setParameter(0, cashierId);
        return query.list();
    }

    /** Internal query to resolve the "transactionsList" to-many relationship of Customer. */
    public List<Transactions> _queryCustomer_TransactionsList(Long customerId) {
        synchronized (this) {
            if (customer_TransactionsListQuery == null) {
                QueryBuilder<Transactions> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                queryBuilder.orderRaw("TRANSACTION_DATE ASC");
                customer_TransactionsListQuery = queryBuilder.build();
            }
        }
        Query<Transactions> query = customer_TransactionsListQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMerchantDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCustomerDao().getAllColumns());
            builder.append(" FROM TRANSACTIONS T");
            builder.append(" LEFT JOIN MERCHANT T0 ON T.'MERCHANT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN USER T1 ON T.'CASHIER_ID'=T1.'_id'");
            builder.append(" LEFT JOIN CUSTOMER T2 ON T.'CUSTOMER_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Transactions loadCurrentDeep(Cursor cursor, boolean lock) {
        Transactions entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Merchant merchant = loadCurrentOther(daoSession.getMerchantDao(), cursor, offset);
         if(merchant != null) {
            entity.setMerchant(merchant);
        }
        offset += daoSession.getMerchantDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
        entity.setCustomer(customer);

        return entity;    
    }

    public Transactions loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Transactions> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Transactions> list = new ArrayList<Transactions>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Transactions> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Transactions> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
