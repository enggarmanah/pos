package com.android.pos.dao;

import java.io.Serializable;

import com.android.pos.dao.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CASHFLOW.
 */
@SuppressWarnings("serial")
public class Cashflow implements Serializable {

    private Long id;
    private String refId;
    private long merchantId;
    private String type;
    private Long billId;
    private Long transactionId;
    private Float cashAmount;
    private java.util.Date cashDate;
    private String remarks;
    private String status;
    private String uploadStatus;
    private String createBy;
    private java.util.Date createDate;
    private String updateBy;
    private java.util.Date updateDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CashflowDao myDao;

    private Merchant merchant;
    private Long merchant__resolvedKey;

    private Bills bills;
    private Long bills__resolvedKey;

    private Transactions transactions;
    private Long transactions__resolvedKey;


    public Cashflow() {
    }

    public Cashflow(Long id) {
        this.id = id;
    }

    public Cashflow(Long id, String refId, long merchantId, String type, Long billId, Long transactionId, Float cashAmount, java.util.Date cashDate, String remarks, String status, String uploadStatus, String createBy, java.util.Date createDate, String updateBy, java.util.Date updateDate) {
        this.id = id;
        this.refId = refId;
        this.merchantId = merchantId;
        this.type = type;
        this.billId = billId;
        this.transactionId = transactionId;
        this.cashAmount = cashAmount;
        this.cashDate = cashDate;
        this.remarks = remarks;
        this.status = status;
        this.uploadStatus = uploadStatus;
        this.createBy = createBy;
        this.createDate = createDate;
        this.updateBy = updateBy;
        this.updateDate = updateDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCashflowDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRefId() {
        return refId;
    }

    public void setRefId(String refId) {
        this.refId = refId;
    }

    public long getMerchantId() {
        return merchantId;
    }

    public void setMerchantId(long merchantId) {
        this.merchantId = merchantId;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Long getBillId() {
        return billId;
    }

    public void setBillId(Long billId) {
        this.billId = billId;
    }

    public Long getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(Long transactionId) {
        this.transactionId = transactionId;
    }

    public Float getCashAmount() {
        return cashAmount;
    }

    public void setCashAmount(Float cashAmount) {
        this.cashAmount = cashAmount;
    }

    public java.util.Date getCashDate() {
        return cashDate;
    }

    public void setCashDate(java.util.Date cashDate) {
        this.cashDate = cashDate;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getUploadStatus() {
        return uploadStatus;
    }

    public void setUploadStatus(String uploadStatus) {
        this.uploadStatus = uploadStatus;
    }

    public String getCreateBy() {
        return createBy;
    }

    public void setCreateBy(String createBy) {
        this.createBy = createBy;
    }

    public java.util.Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(java.util.Date createDate) {
        this.createDate = createDate;
    }

    public String getUpdateBy() {
        return updateBy;
    }

    public void setUpdateBy(String updateBy) {
        this.updateBy = updateBy;
    }

    public java.util.Date getUpdateDate() {
        return updateDate;
    }

    public void setUpdateDate(java.util.Date updateDate) {
        this.updateDate = updateDate;
    }

    /** To-one relationship, resolved on first access. */
    public Merchant getMerchant() {
        long __key = this.merchantId;
        if (merchant__resolvedKey == null || !merchant__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MerchantDao targetDao = daoSession.getMerchantDao();
            Merchant merchantNew = targetDao.load(__key);
            synchronized (this) {
                merchant = merchantNew;
            	merchant__resolvedKey = __key;
            }
        }
        return merchant;
    }

    public void setMerchant(Merchant merchant) {
        if (merchant == null) {
            throw new DaoException("To-one property 'merchantId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.merchant = merchant;
            merchantId = merchant.getId();
            merchant__resolvedKey = merchantId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Bills getBills() {
        Long __key = this.billId;
        if (bills__resolvedKey == null || !bills__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BillsDao targetDao = daoSession.getBillsDao();
            Bills billsNew = targetDao.load(__key);
            synchronized (this) {
                bills = billsNew;
            	bills__resolvedKey = __key;
            }
        }
        return bills;
    }

    public void setBills(Bills bills) {
        synchronized (this) {
            this.bills = bills;
            billId = bills == null ? null : bills.getId();
            bills__resolvedKey = billId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Transactions getTransactions() {
        Long __key = this.transactionId;
        if (transactions__resolvedKey == null || !transactions__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionsDao targetDao = daoSession.getTransactionsDao();
            Transactions transactionsNew = targetDao.load(__key);
            synchronized (this) {
                transactions = transactionsNew;
            	transactions__resolvedKey = __key;
            }
        }
        return transactions;
    }

    public void setTransactions(Transactions transactions) {
        synchronized (this) {
            this.transactions = transactions;
            transactionId = transactions == null ? null : transactions.getId();
            transactions__resolvedKey = transactionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
